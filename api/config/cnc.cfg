import { writable } from 'svelte/store';


//default config

export let defaultConfig = {
    "name": "default",
    "machine": "bonita",
    "controller": {
        "baudrate": 115200
    },
    "probe": {
        "baudrate": 115200,
        "offsetinGrams": -14.39,
        "probingOffset": 10,
        "probingSpeed": 100,
        "press_pressure_socket": 1000,
        "press_pressure_tray": 1000,
        "press_socket" : false,
        "press_tray" : false,
        "hold_pressure" : 1000,
        "hold_pressure_on" : false
    },
    "mechanicalConstrains": {
        "zRate": 2500,
        "zRatePress": 100,
        "xyRate": 10000,
        "zTravelHeight": 110,
        "forces": {
            "maxWhileTraveling": 8000,
            "socketTarget": 100
        }
    },
    "positions": {
        "socket": {
            "x": 382.48,
            "y": 29.81,
            "z": 39.1,
            "zPress": 34.32
        },
        "switch_on": {
            "x": 42,
            "y": 416,
            "z": 39,
            "move_x": 47
        },
        "switch_off": {
            "x": 67,
            "y": 416,
            "z": 39,
            "move_x": 57
        },
        "lastPosition": {
            "x": 100,
            "y": 100,
            "z": 100
        },
        "last_cell": {
            "tray": 0,
            "letter": "A",
            "number": 0
        }
    },
    "commands": {
        "home": [
            "G28"
        ],
        "pick": [
            "M106 P0 S125"
        ],
        "place": [
            "M107 P0"
        ],
        "absolute_pos": [
            "G90"
        ],
        "relative_pos": [
            "G91"
        ],
        "startup": [
            "M85 S600",
            "M154 S4",
            "M106 P1 S255",
            "M155 S2",
            "M300 S440 P1000"
        ],
        "emergency_stop": [
            "M410",
            "M18 Z"
        ],
        "delay": [
            "G4 P"
        ]
    },
    "test_queue": {
        "radius": 190,
        "offsetX": 530,
        "offsetY": 500,
        "speed": 10000
    },
    "spawnCubeConfig": {
        "x": 10,
        "y": 10,
        "z": 10,
        "size": 1,
        "spawn": false
    },
    "triton": {
        "messageExecuted": true
    },
    "tcp": {
        "last_message": "empty",
        "isActive": false
    },
    "tcp_port": 1337,
    "trays": [
        {
            "a0x": 233.64,
            "a0y": 26.81,
            "a0z": 5.53,
            "trayOffsetX": -16,
            "trayOffsetY": 14.6
        },
        {
            "a0x": 234.04,
            "a0y": 22.51,
            "a0z": 7.23,
            "trayOffsetX": -16,
            "trayOffsetY": 14.605
        },
        {
            "a0x": 234.04,
            "a0y": 22.51,
            "a0z": 7.23,
            "trayOffsetX": -16,
            "trayOffsetY": 14.605
        },
        {
            "a0x": 234.04,
            "a0y": 22.51,
            "a0z": 7.23,
            "trayOffsetX": -16,
            "trayOffsetY": 14.605
        }
    ],
    "points": []
};
export const config = writable(defaultConfig);

const storedConfig = localStorage.getItem('config');

if (storedConfig) {
    config.set(JSON.parse(storedConfig));
}

config.subscribe((config) => {
    localStorage.setItem('config', JSON.stringify(config));
});

//MULTIPLES CONFIGS

export let defaultConfigs = [];

const MAX_CONFIGS = 10;

for (let i = 0; i < MAX_CONFIGS; i++) {
    defaultConfigs.push(defaultConfig);
}

//multiple configs

export const configs = writable(defaultConfigs);

const storedConfigs = localStorage.getItem('configs');

if (storedConfigs) {
    configs.set(JSON.parse(storedConfigs));
}

configs.subscribe((configs) => {
    localStorage.setItem('configs', JSON.stringify(configs));
}
);

//store the current index of the configs array
export const currentConfigIndex = writable(0);
const storedCurrentConfigIndex = localStorage.getItem('currentConfigIndex');
if (storedCurrentConfigIndex) {
    currentConfigIndex.set(JSON.parse(storedCurrentConfigIndex));
} else {
    console.log('no stored current config index');
    currentConfigIndex.set(0);
}
currentConfigIndex.subscribe((currentConfigIndex) => {
    localStorage.setItem('currentConfigIndex', JSON.stringify(currentConfigIndex));
});



// // nuke all configs
// localStorage.clear();